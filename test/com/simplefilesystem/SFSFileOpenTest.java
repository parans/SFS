package com.simplefilesystem;

import com.VirtualDisk.VirtualDisk;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.File;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Created by parans on 2/11/17.
 */
@RunWith(MockitoJUnitRunner.class)
public class SFSFileOpenTest {

    private static final String FILE_NAME = "Victor";
    private static final int START_BLOCK_ID = 5000;
    private static final int FINAL_BLOCK_ID = 5004;
    private static final int FILE_SIZE = 16384;

    private static SimpleFileSystem sfsHandle;

    private static SimpleFileMetadataTable sfmt;
    private static SimpleFileBlockAllocator sfba;

    private static SimpleFileDescriptorTable sfdt;
    private static SimpleFileAllocationTable sfat;
    private static VirtualDisk virtualDisk;
    private static SimpleFile simplefile;

    @Before
    public void initialize() {
        sfmt = new SimpleFileMetadataTable();
        sfba = new SimpleFileBlockAllocator();
        sfat = new SimpleFileAllocationTable();
        sfdt = new SimpleFileDescriptorTable();

        simplefile = new SimpleFile(FILE_NAME, START_BLOCK_ID, FINAL_BLOCK_ID, FILE_SIZE, System.currentTimeMillis(),
                System.currentTimeMillis(), 0);

        File disk0;
        disk0 = new File("/Users/parans/testDisk");
        virtualDisk = new VirtualDisk(disk0, "simpleTestDisk");
        sfsHandle = new SimpleFileSystem(sfat, sfmt, sfba, sfdt, virtualDisk);
    }

    @Test
    public void testFileOpenHappyCase() {
        sfmt.put(FILE_NAME, simplefile);
        assertTrue("File descriptor was not allocated to file", sfsHandle.fsOpen(FILE_NAME) >= 0);
    }

    @Test
    public void testFileOpenNullFile() {
        assertEquals("File open should fail", -1, sfsHandle.fsOpen(null));
    }

    @Test
    public void testFileOpenNonExistentFile() {
        sfmt.put(FILE_NAME, simplefile);
        assertEquals("File open should fail", -1, sfsHandle.fsOpen("shata"));
        assertEquals("File open should fail", -1, sfsHandle.fsOpen(" "));
    }

    @Test
    public void testFileOpenAlreadyDeletedFile() {
        sfmt.put(FILE_NAME, simplefile);
        simplefile.startBlockId = -1;
        assertEquals("File open should fail", -1, sfsHandle.fsOpen(FILE_NAME));
    }

    @Test
    public void testFileOpenFailureScenario() {
        sfmt.put(FILE_NAME, simplefile);
        for(int i=0; i<SimpleFileSystemConstants.MAX_FILE_DESCRIPTOR_COUNT; i++) {
            sfdt.getFreeFileDescriptor();
        }
        assertEquals("File open should fail", -1, sfsHandle.fsOpen(FILE_NAME));
    }

}
